/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Apr 26 2017 00:05:04 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q',
    'common/util/ejs',
    'text!./nuxmv.ejs'
], function (PluginConfig,
             pluginMetadata,
             PluginBase,
             Q,
             ejs,
             NuXmv) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    function getTypeName(core, node) {
        return core.getAttribute(core.getBaseType(node), 'name');
    }

    /**
     * Initializes a new instance of SystemNetVerifier.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin SystemNetVerifier.
     * @constructor
     */
    var SystemNetVerifier = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    SystemNetVerifier.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    SystemNetVerifier.prototype = Object.create(PluginBase.prototype);
    SystemNetVerifier.prototype.constructor = SystemNetVerifier;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    SystemNetVerifier.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;
        self.getDataModel(self.activeNode)
            .then(function (model) {
                var nuxmv = ejs.render(NuXmv, model);

                console.log(model.places);
                console.log(model.transitions);
                console.log(nuxmv);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                callback(err, self.result);
            });
    };

    SystemNetVerifier.prototype.getDataModel = function (systemNetNode) {
        var core = this.core,
            model = {
                places: [],
                transitions: [],
                transitionDefs: [],
                capacities: [],
                initial: []
            },
            deferred = Q.defer();

        if (getTypeName(core, systemNetNode) !== 'SystemNet') {
            deferred.reject(new Error('Only SystemNets are allowed'));
            return;
        }

        core.loadChildren(systemNetNode)
            .then(function (children) {
                var i, j,
                    edges = [],
                    type;

                for (i = 0; i < children.length; i += 1) {
                    type = getTypeName(core, children[i]);
                    switch (type) {
                        case 'Place':
                            model.places.push(core.getPath(children[i]));
                            model.capacities.push(core.getAttribute(children[i], 'capacity'));
                            model.initial.push(core.getAttribute(children[i], 'initialMarking'));
                            break;
                        case 'Transition':
                            model.transitions.push(core.getPath(children[i]));
                            break;
                        case 'P2T':
                            edges.push({
                                place: core.getPointerPath(children[i], 'src'),
                                transition: core.getPointerPath(children[i], 'dst'),
                                weight: core.getAttribute(children[i], 'weight'),
                                in: true
                            });
                            break;
                        case 'T2P':
                            edges.push({
                                transition: core.getPointerPath(children[i], 'src'),
                                place: core.getPointerPath(children[i], 'dst'),
                                weight: core.getAttribute(children[i], 'weight'),
                                in: false
                            });
                    }
                }

                for (j = 0; j < model.transitions.length; j += 1) {
                    model.transitionDefs.push([]);
                    for (i = 0; i < model.places.length; i += 1) {
                        model.transitionDefs[j].push([0, 0]);
                    }
                }

                for (i = 0; i < edges.length; i += 1) {
                    j = edges[i].in ? 0 : 1;
                    model.transitionDefs[model.transitions.indexOf(edges[i].transition)][model.places.indexOf(edges[i].place)][j] = edges[i].weight;
                }

                deferred.resolve(model);
            });

        return deferred.promise;
    };

    return SystemNetVerifier;
});
